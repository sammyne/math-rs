var searchIndex = JSON.parse('{\
"math":{"doc":"","t":[0,0,3,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,17,5,5,5,5,5,5,5,5,5],"n":["big","bits","Int","Word","abs","add","and","and_not","append","binomial","bit","bit_len","bits","borrow","borrow_mut","bytes","clone","clone_into","cmp","cmp_abs","default","div","div_mod","eq","exp","fill_bytes","fmt","fmt","from","gcd","int64","into","is_int64","is_uint64","jacobi","lsh","mod","mod_inverse","mod_sqrt","mul","mul_range","neg","new","not","or","quo","quo_rem","rem","rsh","set","set_bit","set_bits","set_bytes","set_int64","set_string","set_uint64","sign","sqrt","string","sub","text","to_owned","to_string","trailing_zero_bits","try_from","try_into","type_id","uint64","xor","UINT_SIZE","add","add32","add64","div","div32","div64","sub","sub32","sub64"],"q":["math","","math::big","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","math::bits","","","","","","","","",""],"d":["","","","","abs sets self to |x| (the absolute value of x) and returns …","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","add returns the sum with carry of x, y and carry: sum = x …","add32 returns the sum with carry of x, y and carry: sum = …","add64 returns the sum with carry of x, y and carry: sum = …","div returns the quotient and remainder of (hi, lo) divided …","div32 returns the quotient and remainder of (hi, lo) …","div64 returns the quotient and remainder of (hi, lo) …","sub returns the difference of x, y and borrow: diff = x - …","",""],"i":[0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,[[1,1],1],[[1,1,1],1],[[1,1,1],1],[[1,1,1],1],[[1,[3,[2]],4],[[3,[2]]]],[[1,5,5],1],[[1,6],6],[1,6],[1,[[8,[7]]]],[[]],[[]],[1,[[3,[2]]]],[1,1],[[]],[[1,1],9],[[1,1],9],[[],1],[[1,1,1],1],[[1,1,1]],[[1,1],10],[[1,1,1,[11,[1]]],[[11,[1]]]],[1],[[1,12],13],[[1,12],13],[[]],[[1,[11,[1]],[11,[1]],1,1],1],[1,5],[[]],[1,10],[1,10],[[1,1],9],[[1,1,6],1],[[1,1,1],1],[[1,1,1],[[11,[1]]]],[[1,1,1],[[11,[1]]]],[[1,1,1],1],[[1,5,5],1],[[1,1],1],[5,1],[[1,1],1],[[1,1,1],1],[[1,1,1],1],[[1,1,1,1]],[[1,1,1],1],[[1,1,6],1],[[1,1],1],[[1,1,6,10],1],[1,1],[1,1],[[1,5],1],[[1,14,2],[[11,[1]]]],[[1,15],1],[1,9],[[1,1],1],[1,16],[[1,1,1],1],[[1,4],16],[[]],[[],16],[1,6],[[],17],[[],17],[[],18],[1,15],[[1,1,1],1],0,[[6,6,6]],[[4,4,4]],[[15,15,15]],[[6,6,6]],[[4,4,4]],[[15,15,15]],[[6,6,6]],[[4,4,4]],[[15,15,15]]],"p":[[3,"Int"],[15,"u8"],[3,"Vec"],[15,"u32"],[15,"i64"],[15,"usize"],[8,"DoubleEndedIterator"],[3,"Box"],[15,"i32"],[15,"bool"],[4,"Option"],[3,"Formatter"],[6,"Result"],[15,"str"],[15,"u64"],[3,"String"],[4,"Result"],[3,"TypeId"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
