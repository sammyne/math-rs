var searchIndex = JSON.parse('{\
"math":{"doc":"","t":[0,0,3,17,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,17,5,5,5,5,5,5,5,5,5],"n":["big","bits","Int","MAX_BASE","abs","add","and","and_not","append","binomial","bit","bit_len","bits","borrow","borrow_mut","bytes","clone","clone_into","cmp","cmp_abs","default","div","div_mod","eq","exp","fill_bytes","fmt","fmt","fmt","fmt","fmt","fmt","from","gcd","int64","into","is_int64","is_uint64","jacobi","lsh","mod","mod_inverse","mod_sqrt","mul","mul_range","neg","new","not","or","quo","quo_rem","rand","rem","rsh","set","set_bit","set_bits","set_bytes","set_int64","set_string","set_uint64","sign","sqrt","string","sub","text","to_owned","to_string","trailing_zero_bits","try_from","try_into","type_id","uint64","xor","UINT_SIZE","add","add32","add64","div","div32","div64","sub","sub32","sub64"],"q":["math","","math::big","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","math::bits","","","","","","","","",""],"d":["Implements arbitrary-precision arithmetic (big numbers). …","","An Int represents a signed multi-precision integer. The …","The largest number base accepted for string conversions.","abs sets self to |x| (the absolute value of x) and returns …","Sets self to the sum x+y and returns self.","Sets self = x &amp; y and returns self.","Sets self = x &amp;^ y and returns self.","Appends the string representation of <code>self</code>, as generated by …","Sets <code>self</code> to the binomial coefficient of (n, k) and …","Returns the value of the i’th bit of <code>self</code>. That is, it …","Returns the length of the absolute value of self in bits.","Provides raw (unchecked but fast) access to <code>self</code> by …","","","Returns the absolute value of <code>self</code> as a big-endian byte …","","","Compares x and y and returns:","Compares the absolute values of x and y and returns:","","Sets <code>self</code> to the quotient x/y for y != 0 and returns self. …","Sets <code>self</code> to the quotient <code>x div y</code> and <code>m</code> to the modulus …","","Sets <code>self = x**y mod |m|</code> (i.e. the sign of <code>m</code> is ignored), …","Sets <code>buf</code> to the absolute value of <code>self</code>, storing it as a …","","","","","","","Returns the argument unchanged.","Sets <code>self</code> to the greatest common divisor of <code>a</code> and <code>b</code> and …","Returns the i64 representation of <code>self</code>. If <code>self</code> cannot be …","Calls <code>U::from(self)</code>.","Reports whether <code>self</code> can be represented as an int64.","Reports whether <code>self</code> can be represented as a uint64.","Returns the Jacobi symbol (x/y), either +1, -1, or 0. The …","Sets <code>self = x &lt;&lt; n</code> and returns <code>self</code>.","Sets <code>self</code> to the modulus <code>x%y</code> for <code>y</code> != 0 and returns <code>self</code>. …","Sets <code>self</code> to the multiplicative inverse of <code>g</code> in the ring …","Sets <code>self</code> to a square root of <code>self mod p</code> if such a square …","Sets <code>self</code> to the product <code>x*y</code> and returns <code>self</code>.","Sets <code>self</code> to the product of all integers in the range …","Sets <code>self</code> to <code>-x</code> and returns <code>self</code>.","Allocates and returns a new <code>Int</code> set to <code>x</code>.","Sets <code>self = ^x</code> and returns <code>self</code>.","Sets <code>self = x | y</code> and returns <code>self</code>.","Sets <code>self</code> to the quotient <code>x/y</code> for <code>y</code> != 0 and returns <code>self</code>. …","Sets <code>self</code> to the quotient <code>x/y</code> and <code>r</code> to the remainder <code>x%y</code> …","Sets <code>self</code> to a pseudo-random number in <code>[0, n)</code> and returns …","Sets <code>self</code> to the remainder <code>x%y</code> for <code>y</code> != 0 and returns <code>self</code>.","Sets <code>self = x &gt;&gt; n</code> and returns <code>self</code>.","Sets <code>self</code> to <code>x</code> and returns <code>self</code>.","Sets <code>self</code> to <code>x</code>, with <code>x</code>’s i’th bit set to 0/1 for …","Provides raw (unchecked but fast) access to <code>self</code> by …","Interprets <code>buf</code> as the bytes of a big-endian unsigned …","Sets <code>self</code> to <code>x</code> and returns <code>self</code>.","Sets <code>self</code> to the value of <code>s</code>, interpreted in the given <code>base</code>,","Sets <code>self</code> to <code>x</code> and returns <code>self</code>.","Returns:","Sets <code>self</code> to <code>⌊√x⌋</code>, the largest integer such that …","Returns the decimal representation of <code>self</code> as generated by …","Sets <code>self</code> to the difference <code>x-y</code> and returns <code>self</code>.","Returns the string representation of <code>self</code> in the given …","","","Returns the number of consecutive least significant zero …","","","","returns the uint64 representation of <code>self</code>. If <code>self</code> cannot …","Sets <code>self = x ^ y</code> and returns <code>self</code>.","","add returns the sum with carry of x, y and carry: sum = x …","add32 returns the sum with carry of x, y and carry: sum = …","add64 returns the sum with carry of x, y and carry: sum = …","div returns the quotient and remainder of (hi, lo) divided …","div32 returns the quotient and remainder of (hi, lo) …","div64 returns the quotient and remainder of (hi, lo) …","sub returns the difference of x, y and borrow: diff = x - …","",""],"i":[0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,[[1,1],1],[[1,1,1],1],[[1,1,1],1],[[1,1,1],1],[[1,[3,[2]],2],[[3,[2]]]],[[1,4,4],1],[[1,5],2],[1,5],[1,[[7,[6]]]],[[]],[[]],[1,[[3,[2]]]],[1,1],[[]],[[1,1],8],[[1,1],8],[[],1],[[1,1,1],1],[[1,1,1,1]],[[1,1],9],[[1,1,1,[10,[1]]],[[10,[1]]]],[1],[[1,11],12],[[1,11],12],[[1,11],12],[[1,11],12],[[1,11],12],[[1,11],12],[[]],[[1,[10,[1]],[10,[1]],1,1],1],[1,4],[[]],[1,9],[1,9],[[1,1],8],[[1,1,5],1],[[1,1,1],1],[[1,1,1],[[10,[1]]]],[[1,1,1],[[10,[1]]]],[[1,1,1],1],[[1,4,4],1],[[1,1],1],[4,1],[[1,1],1],[[1,1,1],1],[[1,1,1],1],[[1,1,1,1]],[[1,1],1],[[1,1,1],1],[[1,1,5],1],[[1,1],1],[[1,1,5,9],1],[1,1],[1,1],[[1,4],1],[[1,13,2],[[10,[1]]]],[[1,14],1],[1,8],[[1,1],1],[1,15],[[1,1,1],1],[[1,2],15],[[]],[[],15],[1,5],[[],16],[[],16],[[],17],[1,14],[[1,1,1],1],0,[[5,5,5]],[[18,18,18]],[[14,14,14]],[[5,5,5]],[[18,18,18]],[[14,14,14]],[[5,5,5]],[[18,18,18]],[[14,14,14]]],"p":[[3,"Int"],[15,"u8"],[3,"Vec"],[15,"i64"],[15,"usize"],[8,"DoubleEndedIterator"],[3,"Box"],[15,"i32"],[15,"bool"],[4,"Option"],[3,"Formatter"],[6,"Result"],[15,"str"],[15,"u64"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
