var searchIndex = JSON.parse('{\
"math":{"doc":"","t":[0,0,3,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,17,5,5,5,5,5,5,5,5,5],"n":["big","bits","Int","Word","abs","add","and","and_not","append","binomial","bit","bit_len","bits","borrow","borrow_mut","bytes","clone","clone_into","cmp","cmp_abs","default","div","div_mod","eq","exp","fill_bytes","fmt","fmt","from","gcd","int64","into","is_int64","is_uint64","jacobi","lsh","mod","mod_inverse","mod_sqrt","mul","mul_range","ne","neg","new","not","or","quo","quo_rem","rem","rsh","set","set_bit","set_bits","set_int64","set_string","set_uint64","sign","sqrt","string","sub","text","to_owned","to_string","trailing_zero_bits","try_from","try_into","type_id","uint64","xor","UINT_SIZE","add","add32","add64","div","div32","div64","sub","sub32","sub64"],"q":["math","","math::big","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","math::bits","","","","","","","","",""],"d":["","","","","abs sets self to |x| (the absolute value of x) and returns …","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","add returns the sum with carry of x, y and carry: sum = x …","add32 returns the sum with carry of x, y and carry: sum = …","add64 returns the sum with carry of x, y and carry: sum = …","div returns the quotient and remainder of (hi, lo) divided …","div32 returns the quotient and remainder of (hi, lo) …","div64 returns the quotient and remainder of (hi, lo) …","sub returns the difference of x, y and borrow: diff = x - …","",""],"i":[0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0],"f":[null,null,null,null,[[["int",3],["int",3]],["int",3]],[[["int",3],["int",3],["int",3]],["int",3]],[[["int",3],["int",3],["int",3]],["int",3]],[[["int",3],["int",3],["int",3]],["int",3]],[[["int",3],["vec",3,[["u8",0]]],["u32",0]],["vec",3,[["u8",0]]]],[[["int",3],["i64",0],["i64",0]],["int",3]],[[["int",3],["usize",0]],["usize",0]],[[["int",3]],["usize",0]],[[["int",3]],["box",3,[["doubleendediterator",8]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["int",3]],["vec",3,[["u8",0]]]],[[["int",3]],["int",3]],[[["",0],["",0]]],[[["int",3],["int",3]],["i32",0]],[[["int",3],["int",3]],["i32",0]],[[],["int",3]],[[["int",3],["int",3],["int",3]],["int",3]],[[["int",3],["int",3],["int",3]]],[[["int",3],["int",3]],["bool",0]],[[["int",3],["int",3],["int",3],["option",4,[["int",3]]]],["option",4,[["int",3]]]],[[["int",3]]],[[["int",3],["formatter",3]],["result",6]],[[["int",3],["formatter",3]],["result",6]],[[]],[[["int",3],["option",4,[["int",3]]],["option",4,[["int",3]]],["int",3],["int",3]],["int",3]],[[["int",3]],["i64",0]],[[]],[[["int",3]],["bool",0]],[[["int",3]],["bool",0]],[[["int",3],["int",3]],["i32",0]],[[["int",3],["int",3],["usize",0]],["int",3]],[[["int",3],["int",3],["int",3]],["int",3]],[[["int",3],["int",3],["int",3]],["option",4,[["int",3]]]],[[["int",3],["int",3],["int",3]],["option",4,[["int",3]]]],[[["int",3],["int",3],["int",3]],["int",3]],[[["int",3],["i64",0],["i64",0]],["int",3]],[[["int",3],["int",3]],["bool",0]],[[["int",3],["int",3]],["int",3]],[[["i64",0]],["int",3]],[[["int",3],["int",3]],["int",3]],[[["int",3],["int",3],["int",3]],["int",3]],[[["int",3],["int",3],["int",3]],["int",3]],[[["int",3],["int",3],["int",3],["int",3]]],[[["int",3],["int",3],["int",3]],["int",3]],[[["int",3],["int",3],["usize",0]],["int",3]],[[["int",3],["int",3]],["int",3]],[[["int",3],["int",3],["usize",0],["bool",0]],["int",3]],[[["int",3]],["int",3]],[[["int",3],["i64",0]],["int",3]],[[["int",3],["str",0],["u8",0]],["option",4,[["int",3]]]],[[["int",3],["u64",0]],["int",3]],[[["int",3]],["i32",0]],[[["int",3],["int",3]],["int",3]],[[["int",3]],["string",3]],[[["int",3],["int",3],["int",3]],["int",3]],[[["int",3],["u32",0]],["string",3]],[[["",0]]],[[["",0]],["string",3]],[[["int",3]],["usize",0]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["int",3]],["u64",0]],[[["int",3],["int",3],["int",3]],["int",3]],null,[[["usize",0],["usize",0],["usize",0]]],[[["u32",0],["u32",0],["u32",0]]],[[["u64",0],["u64",0],["u64",0]]],[[["usize",0],["usize",0],["usize",0]]],[[["u32",0],["u32",0],["u32",0]]],[[["u64",0],["u64",0],["u64",0]]],[[["usize",0],["usize",0],["usize",0]]],[[["u32",0],["u32",0],["u32",0]]],[[["u64",0],["u64",0],["u64",0]]]],"p":[[3,"Int"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
